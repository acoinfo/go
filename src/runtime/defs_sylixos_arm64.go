// Code generated by cmd/cgo -godefs; DO NOT EDIT.
// cgo.exe -godefs -- -DSYLIXOS -ID:/WS/SylixOS_WS/base1/libsylixos/SylixOS -ID:/WS/SylixOS_WS/base1/libsylixos/SylixOS/include -ID:/WS/SylixOS_WS/base1/libsylixos/SylixOS/include/network defs_sylixos.go

//go:build sylixos && arm64

package runtime

const (
	_EPERM     = 0x1
	_ENOENT    = 0x2
	_EINTR     = 0x4
	_EAGAIN    = 0xb
	_ENOMEM    = 0xc
	_EACCES    = 0xd
	_EFAULT    = 0xe
	_EINVAL    = 0x16
	_ETIMEDOUT = 0x3c

	_PROT_NONE  = 0x0
	_PROT_READ  = 0x1
	_PROT_WRITE = 0x2
	_PROT_EXEC  = 0x4

	_MAP_ANON      = 0x8
	_MAP_PRIVATE   = 0x2
	_MAP_FIXED     = 0x4
	_MADV_DONTNEED = 0x4
	_MAP_PREALLOC  = 0x8000

	_SIGHUP    = 0x1
	_SIGINT    = 0x2
	_SIGQUIT   = 0x3
	_SIGILL    = 0x4
	_SIGTRAP   = 0x5
	_SIGABRT   = 0x6
	_SIGBUS    = 0xa
	_SIGFPE    = 0x8
	_SIGKILL   = 0x9
	_SIGUSR1   = 0x1e
	_SIGSEGV   = 0xb
	_SIGUSR2   = 0x1f
	_SIGPIPE   = 0xd
	_SIGALRM   = 0xe
	_SIGCHLD   = 0x14
	_SIGCONT   = 0x13
	_SIGSTOP   = 0x11
	_SIGTSTP   = 0x12
	_SIGTTIN   = 0x15
	_SIGTTOU   = 0x16
	_SIGURG    = 0x23
	_SIGXCPU   = 0x18
	_SIGXFSZ   = 0x19
	_SIGVTALRM = 0x1a
	_SIGPROF   = 0x1b
	_SIGWINCH  = 0x1c
	_SIGIO     = 0x17
	_SIGPWR    = 0x21
	_SIGSYS    = 0x22
	_SIGTERM   = 0xf

	_NSIG = 64

	_FPE_INTDIV = 0x1
	_FPE_INTOVF = 0x2
	_FPE_FLTDIV = 0x3
	_FPE_FLTOVF = 0x4
	_FPE_FLTUND = 0x5
	_FPE_FLTRES = 0x6
	_FPE_FLTINV = 0x7
	_FPE_FLTSUB = 0x8

	_BUS_ADRALN = 0x1
	_BUS_ADRERR = 0x2
	_BUS_OBJERR = 0x3

	_SEGV_MAPERR = 0x1
	_SEGV_ACCERR = 0x2

	_ITIMER_REAL    = 0x0
	_ITIMER_VIRTUAL = 0x1
	_ITIMER_PROF    = 0x2

	_O_RDONLY   = 0x0
	_O_WRONLY   = 0x1
	_O_NONBLOCK = 0x4000
	_O_CREAT    = 0x200
	_O_TRUNC    = 0x400
	_O_CLOEXEC  = 0x80000

	_SS_DISABLE  = 0x2
	_SI_USER     = 0x0
	_SIG_BLOCK   = 0x1
	_SIG_UNBLOCK = 0x2
	_SIG_SETMASK = 0x3

	_SA_SIGINFO = 0x2
	_SA_RESTART = 0x10000000
	_SA_ONSTACK = 0x4

	_PTHREAD_CREATE_DETACHED = 0x0

	__SC_PAGE_SIZE        = 0x2f
	__SC_NPROCESSORS_ONLN = 0x3a

	_F_SETFL = 0x4
	_F_GETFD = 0x1
	_F_GETFL = 0x3

	_CLOCK_REALTIME           = 0x0
	_CLOCK_MONOTONIC          = 0x1
	_CLOCK_PROCESS_CPUTIME_ID = 0x2
	_CLOCK_THREAD_CPUTIME_ID  = 0x3

	_AF_UNIX    = 0x1
	_SOCK_DGRAM = 0x2

	EPOLLIN      = 0x1
	EPOLLPRI     = 0x2
	EPOLLOUT     = 0x4
	EPOLLERR     = 0x8
	EPOLLHUP     = 0x10
	EPOLLRDHUP   = 0x10
	EPOLLONESHOT = 0x40000000
	EPOLLET      = 0x80000000

	EPOLL_CLOEXEC  = 0x80000
	EPOLL_NONBLOCK = 0x4000

	EPOLL_CTL_ADD = 0x1
	EPOLL_CTL_DEL = 0x2
	EPOLL_CTL_MOD = 0x3
)

type timespec struct {
	tv_sec  int64
	tv_nsec int64
}

func (ts *timespec) setNsec(ns int64) {
	ts.tv_sec = ns / 1e9
	ts.tv_nsec = ns % 1e9
}

type timeval struct {
	tv_sec  int64
	tv_usec int64
}

func (tv *timeval) set_usec(x int32) {
	tv.tv_usec = int64(x)
}

type itimerspec struct {
	it_interval timespec
	it_value    timespec
}

type itimerval struct {
	it_interval timeval
	it_value    timeval
}

type sigactiont struct {
	sa_handler  uintptr
	sa_mask     uint64
	sa_flags    uint32
	sa_restorer uintptr
}

type siginfoFields struct {
	si_signo int32
	si_errno int32
	si_code  int32

	_ int32

	si_pid    int32
	si_uid    int32
	si_status int32
	si_utime  uintptr
	si_stime  uintptr

	si_addr uint64
}

type siginfo struct {
	siginfoFields

	_ [4]uintptr
}

type sigeventFields struct {
	signo                   int32
	value                   uintptr
	notify                  int32
	sigev_notify_function   uintptr
	sigev_notify_attributes uintptr

	sigev_notify_thread_id uint64
}

type sigevent struct {
	sigeventFields

	_ [8]uint64
}

type stackt struct {
	ss_sp    *byte
	ss_size  uintptr
	ss_flags int32
}

type sigcontext struct {
	small_ctx uint64

	regs   [31]uint64
	sp     uint64
	pc     uint64
	pstate uint64
}

type semt struct {
	pxsem  uintptr
	resraw uintptr
	pad    [5]uintptr
}

type sockaddr_un struct {
	len    uint8
	family uint8
	path   [104]byte
}

type sched_param struct {
	sched_priority        int32
	sched_ss_low_priority int32
	sched_ss_repl_period  timespec
	sched_ss_init_budget  timespec
	sched_ss_max_repl     int32
	sched_pad             [12]uintptr
}

type pthread uintptr

type pthreadattr struct {
	name             *byte
	stack            uintptr
	stack_guard_size uint64
	stack_size       uint64
	sched_policy     int32
	option           uint64
	schedparam       sched_param
	pad              [8]uintptr
}

type EpollEvent struct {
	Events    uint32
	Pad_cgo_0 [4]byte
	Data      [8]byte
}
